name: "Feature Branch Pipeline"

on:
  push:
    branches: [ "feature/**" ]
  pull_request:
    branches: [ "feature/**" ]

jobs:

  build:
    name: Debug Build
    runs-on: ubuntu-latest
    # https://hub.docker.com/r/fabernovel/android/tags
    container: fabernovel/android:api-33-gcloud-ndk-v1.7.0

    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Gradle cache
      uses: actions/cache@v3
      with:
        path: |
          /root/.gradle/caches
          /root/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Gradle build
      run: ./gradlew assembleDebug
        
  unitTests:
     name: Unit Tests
     runs-on: ubuntu-latest
     needs: build
     # https://hub.docker.com/r/fabernovel/android/tags
     container: fabernovel/android:api-33-gcloud-ndk-v1.7.0

     steps:
     - name: checkout
       uses: actions/checkout@v3
     - name: Gradle cache
       uses: actions/cache@v3
       with:
         path: |
          /root/.gradle/caches
          /root/.gradle/wrapper
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
         restore-keys: |
          ${{ runner.os }}-gradle-
     - name: Gradle build
       run: ./gradlew compileDebugUnitTestSources    
       
  integrationTests:
     name: Integration Tests
     runs-on: ubuntu-latest
     needs: build
     # https://hub.docker.com/r/fabernovel/android/tags
     container: fabernovel/android:api-33-gcloud-ndk-v1.7.0

     steps:
     - name: checkout
       uses: actions/checkout@v3
     - name: Gradle cache
       uses: actions/cache@v3
       with:
         path: |
          /root/.gradle/caches
          /root/.gradle/wrapper
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
         restore-keys: |
          ${{ runner.os }}-gradle-
     - name: Gradle build
       run: ./gradlew compileDebugUnitTestSources        
  
  code-scan:
    runs-on: ubuntu-latest
    needs: [unitTests, integrationTests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup CodeQL
        uses: github/codeql-action/setup@v2
      - name: Build and Analyze
        run: |
          codeql database create --language=kotlin --source-root=. MyDB
          codeql analyze --database=MyDB --format=sarif-latest --output=results.sarif
           
  secureCodeScanning:
    name: NowSecure
    runs-on: ubuntu-latest
    needs: code-scan
    steps:
      - name: Run NowSecure
        uses: nowsecure/nowsecure-action@3b439db31b6dce857b09f5222fd13ffc3159ad26
        with:
          token: ${{ secrets.NS_TOKEN }}
          app_file: app/build/outputs/apk/debug/app-debug.apk                 # Update this to a path to your .ipa or .apk
          group_id: com.example.testapplication                 # Update this to your desired Platform group ID

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: NowSecure.sarif
  
  
